{"name":"Creek","tagline":"A simple web development framework with Sinatra looks and Dart power.","body":"Creek\r\n=====\r\n[![Build Status](https://drone.io/github.com/Dreckr/Creek/status.png)](https://drone.io/github.com/Dreckr/Creek/latest)\r\n\r\nA simple web development framework with Sinatra looks and Dart power.\r\n\r\nCreek is a web development framework that let's you feel at home while you take advantage of Dart. It does\r\nthings a little different than most Sinatra-inspired frameworks by using a routing tree (instead of a set of RegExp\r\nmatchers) and Streams API.\r\n\r\nA routing tree is a tree with all the accessible URL paths of a server. This tree allows the framework to be lighting \r\nfast while finding the right handler of a HTTP request. Also, it stores some metadata about your routes that might\r\ncome in handy. For example, when close a route (e.g., \"/foo\"), you might want to close all it's child routes (e.g., \r\n\"/foo/bar\", \"/foo/barz\", \"/foo/bar/qux\") and Creek can do exactly that.\r\n\r\nWith the use of the Streams API, you get full control of your request flow. You can filter requests by calling \r\nStream.where, redirect requests internally to another consumer with Stream.pipe, modify request in some manner using\r\na StreamTransformer, pause your handler from receiving request through StreamSubscription.pause... If Dart's HttpServer \r\nis a Stream, your framework should work accordingly to give as much power as possible.\r\n\r\nUsage\r\n-----\r\nRunning a Creek server is really straight forward:\r\n\r\n```dart\r\nCreek creek = new Creek();\r\ncreek.bind('127.0.0.1', 7070);\r\n\r\n//Or\r\nHttpServer.bind('127.0.0.1', 7071).then((server) => creek.bind(server));\r\n```\r\n\r\nWhen a Creek is instanciated, it can be used to create all routes right away. A HttpServer is not created though, \r\nso you have to tell Creek to bind to an address or a HttpServer. The bind() method returns a Future, which will gives\r\nyou a HttpServer server when complete.\r\n\r\nRoutes\r\n------\r\nCreating routes is easy:\r\n```dart\r\ncreek\r\n\t..get('/', (req, res) => res.send('Hello, Dartisans!'))\r\n\t..post('/foo', (req, res) => res.send('It is so easy, it got boring already... or maybe not!'));\r\n\t\r\n// Alternatively, you can do this\r\ncreek.put('/bar').listen((req) => req.response.send('It is time to go to the bar'));\r\n```\r\n\r\nStreams and StreamSubscriptions\r\n------------------------------------------\r\nWith Streams and StreamSubscriptions, you can add some awesome sauce to your code:\r\n```dart\r\nStreamSubscription subscription = creek.get('/filtered').where((req) {\r\n      if (req.params['name'] == 'Creek') {\r\n        return true;\r\n      } else {\r\n      \t// Remember to treat rejected requests so they won't stay alive waiting for a response... forever...\r\n        req.response.status = HttpStatus.FORBIDDEN;\r\n        req.response.close();\r\n        return false;\r\n      }\r\n    }).listen((req) => req.response.send('Filtered!'));\r\n    \r\n// When paused, no request will be passed to this subscription.\r\nsubscription.pause();\r\n\r\n// You can pause and resume subscriptions freely at runtime, without much trouble. This way, you can control your routes\r\n// while your server is stil running. \r\ncreek.get('/resume', (req, res) { subscription.resume(); res.send('subscription resumed!'); });\r\n```\r\n\r\nLicense\r\n-------\r\n\r\nCopyright (c) 2013 Diego Rocha <diego.rocha.comp@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}